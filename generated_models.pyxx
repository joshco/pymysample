# This is an auto-generated Django model module.
# You'll have to do the following manually to clean this up:
#   * Rearrange models' order
#   * Make sure each model has one field with primary_key=True
#   * Remove `managed = False` lines if you wish to allow Django to create, modify, and delete the table
# Feel free to rename the models, but don't rename db_table values or field names.
#
# Also note: You'll have to insert the output of 'django-admin sqlcustom [app_label]'
# into your database.
from __future__ import unicode_literals

from django.db import models

class People(models.Model):
    name = models.CharField(max_length=255, blank=True, null=True)
    mobile = models.CharField(max_length=255, blank=True, null=True)
    email = models.CharField(max_length=255, blank=True, null=True)
    script_sequence = models.IntegerField(blank=True, null=True)
    created_at = models.DateTimeField()
    updated_at = models.DateTimeField()
    script_id = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'people'


class ActiveAdminComments(models.Model):
    namespace = models.CharField(max_length=255, blank=True, null=True)
    body = models.TextField(blank=True, null=True)
    resource_id = models.CharField(max_length=255)
    resource_type = models.CharField(max_length=255)
    author_id = models.IntegerField(blank=True, null=True)
    author_type = models.CharField(max_length=255, blank=True, null=True)
    created_at = models.DateTimeField(blank=True, null=True)
    updated_at = models.DateTimeField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'active_admin_comments'

class Questions(models.Model):
    name = models.CharField(max_length=255, blank=True, null=True)
    title = models.CharField(max_length=255, blank=True, null=True)
    description = models.CharField(max_length=255, blank=True, null=True)
    summary = models.CharField(max_length=255, blank=True, null=True)
    question_type = models.CharField(max_length=255, blank=True, null=True)
    script_sequence = models.IntegerField(blank=True, null=True)
    created_at = models.DateTimeField()
    updated_at = models.DateTimeField()
    init_question = models.NullBooleanField()
    after_comment = models.TextField(blank=True, null=True)
    script_id = models.IntegerField(blank=True, null=True)
    osdi_path = models.CharField(max_length=255, blank=True, null=True)
    default_answer = models.CharField(max_length=255, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'questions'


class Answers(models.Model):
    value = models.CharField(max_length=255, blank=True, null=True)
    action_date = models.DateTimeField(blank=True, null=True)
    
    
    created_at = models.DateTimeField()
    updated_at = models.DateTimeField()
    user_id = models.IntegerField(blank=True, null=True)
    person=models.ForeignKey(People)
    question=models.ForeignKey(Questions)

    class Meta:
        managed = False
        db_table = 'answers'


class BillingEntities(models.Model):
    name = models.CharField(max_length=255, blank=True, null=True)
    address_line1 = models.CharField(max_length=255, blank=True, null=True)
    address_line2 = models.CharField(max_length=255, blank=True, null=True)
    address_city = models.CharField(max_length=255, blank=True, null=True)
    address_state = models.CharField(max_length=255, blank=True, null=True)
    address_zip = models.CharField(max_length=255, blank=True, null=True)
    address_country = models.CharField(max_length=255, blank=True, null=True)
    entity_name = models.CharField(max_length=255, blank=True, null=True)
    entity_description = models.TextField(blank=True, null=True)
    stripe_token = models.CharField(max_length=255, blank=True, null=True)
    last4 = models.CharField(max_length=255, blank=True, null=True)
    brand = models.CharField(max_length=255, blank=True, null=True)
    exp_month = models.CharField(max_length=255, blank=True, null=True)
    exp_year = models.CharField(max_length=255, blank=True, null=True)
    created_at = models.DateTimeField()
    updated_at = models.DateTimeField()
    customer_id = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'billing_entities'


class Customers(models.Model):
    name = models.CharField(max_length=255, blank=True, null=True)
    tenant_name = models.CharField(max_length=255)
    created_at = models.DateTimeField()
    updated_at = models.DateTimeField()
    auth_param = models.CharField(max_length=255, blank=True, null=True)
    auth_token = models.CharField(max_length=255, blank=True, null=True)
    auth_enabled = models.NullBooleanField()
    guru_id = models.IntegerField(blank=True, null=True)
    partner_id = models.IntegerField(blank=True, null=True)
    bill_to = models.IntegerField(blank=True, null=True)
    bill_to_id = models.IntegerField(blank=True, null=True)
    api_token = models.CharField(max_length=255, blank=True, null=True)
    max_numbers = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'customers'


class DonationPledges(models.Model):
    person_id = models.IntegerField(blank=True, null=True)
    amount = models.IntegerField(blank=True, null=True)
    aasm_state = models.CharField(max_length=255, blank=True, null=True)
    external_ids = models.TextField()  # This field type is a guess.
    integration_id = models.IntegerField(blank=True, null=True)
    last_notification = models.DateTimeField(blank=True, null=True)
    created_at = models.DateTimeField()
    updated_at = models.DateTimeField()
    notification_count = models.IntegerField()

    class Meta:
        managed = False
        db_table = 'donation_pledges'


class IntegrationScripts(models.Model):
    integration_id = models.IntegerField(blank=True, null=True)
    script_id = models.IntegerField(blank=True, null=True)
    created_at = models.DateTimeField()
    updated_at = models.DateTimeField()
    active = models.NullBooleanField()
    meta = models.TextField()  # This field type is a guess.

    class Meta:
        managed = False
        db_table = 'integration_scripts'


class Integrations(models.Model):
    integration_type = models.CharField(max_length=255, blank=True, null=True)
    name = models.CharField(max_length=255, blank=True, null=True)
    description = models.TextField(blank=True, null=True)
    created_at = models.DateTimeField()
    updated_at = models.DateTimeField()
    push_url = models.TextField(blank=True, null=True)
    api_token = models.TextField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'integrations'


class Partners(models.Model):
    name = models.CharField(max_length=255, blank=True, null=True)
    description = models.TextField(blank=True, null=True)
    domain = models.CharField(max_length=255, blank=True, null=True)
    created_at = models.DateTimeField()
    updated_at = models.DateTimeField()

    class Meta:
        managed = False
        db_table = 'partners'



class PhoneNumbers(models.Model):
    number = models.CharField(max_length=255, blank=True, null=True)
    name = models.CharField(max_length=255, blank=True, null=True)
    customer_id = models.IntegerField(blank=True, null=True)
    telco_meta = models.TextField()  # This field type is a guess.
    created_at = models.DateTimeField()
    updated_at = models.DateTimeField()
    twilio_sid = models.CharField(max_length=255, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'phone_numbers'


class Plans(models.Model):
    name = models.CharField(max_length=255, blank=True, null=True)
    messages = models.IntegerField(blank=True, null=True)
    scripts = models.IntegerField(blank=True, null=True)
    description = models.CharField(max_length=255, blank=True, null=True)
    cost_cents = models.IntegerField(blank=True, null=True)
    active = models.NullBooleanField()
    created_at = models.DateTimeField()
    updated_at = models.DateTimeField()

    class Meta:
        managed = False
        db_table = 'plans'




class Roles(models.Model):
    name = models.CharField(max_length=255, blank=True, null=True)
    resource_id = models.IntegerField(blank=True, null=True)
    resource_type = models.CharField(max_length=255, blank=True, null=True)
    created_at = models.DateTimeField(blank=True, null=True)
    updated_at = models.DateTimeField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'roles'


class SchemaMigrations(models.Model):
    version = models.CharField(unique=True, max_length=255)

    class Meta:
        managed = False
        db_table = 'schema_migrations'


class Scripts(models.Model):
    start_word = models.CharField(max_length=255, blank=True, null=True)
    default = models.NullBooleanField()
    plan = models.CharField(max_length=255, blank=True, null=True)
    script_type = models.CharField(max_length=255, blank=True, null=True)
    description = models.TextField(blank=True, null=True)
    customer_id = models.IntegerField(blank=True, null=True)
    name = models.CharField(max_length=255, blank=True, null=True)
    created_at = models.DateTimeField()
    updated_at = models.DateTimeField()
    prologue = models.TextField(blank=True, null=True)
    epilogue = models.TextField(blank=True, null=True)
    epilogue_media_url = models.CharField(max_length=255, blank=True, null=True)
    form_redirect = models.CharField(max_length=255, blank=True, null=True)
    form_title = models.CharField(max_length=255, blank=True, null=True)
    form_include_auto = models.NullBooleanField()

    class Meta:
        managed = False
        db_table = 'scripts'


class Stamps(models.Model):
    src = models.CharField(max_length=255, blank=True, null=True)
    cropped = models.CharField(max_length=255, blank=True, null=True)
    stamped = models.CharField(max_length=255, blank=True, null=True)
    person_id = models.IntegerField(blank=True, null=True)
    created_at = models.DateTimeField()
    updated_at = models.DateTimeField()
    x = models.FloatField(blank=True, null=True)
    y = models.FloatField(blank=True, null=True)
    height = models.FloatField(blank=True, null=True)
    width = models.FloatField(blank=True, null=True)
    slug = models.CharField(max_length=255, blank=True, null=True)
    show_public = models.NullBooleanField()
    rotation = models.FloatField(blank=True, null=True)
    share_token = models.CharField(max_length=255, blank=True, null=True)
    face_detection = models.TextField()  # This field type is a guess.
    aasm_state = models.CharField(max_length=255, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'stamps'


class Subscriptions(models.Model):
    plan_id = models.IntegerField(blank=True, null=True)
    customer_id = models.IntegerField(blank=True, null=True)
    billing_entity_id = models.IntegerField(blank=True, null=True)
    end_date = models.DateTimeField(blank=True, null=True)
    subscription_type = models.CharField(max_length=255, blank=True, null=True)
    created_at = models.DateTimeField()
    updated_at = models.DateTimeField()

    class Meta:
        managed = False
        db_table = 'subscriptions'


class Templates(models.Model):
    content = models.TextField(blank=True, null=True)
    template_type = models.CharField(max_length=255, blank=True, null=True)
    name = models.CharField(max_length=255, blank=True, null=True)
    created_at = models.DateTimeField()
    updated_at = models.DateTimeField()

    class Meta:
        managed = False
        db_table = 'templates'


class Texts(models.Model):
    body = models.TextField(blank=True, null=True)
    person_id = models.IntegerField(blank=True, null=True)
    forwarded_at = models.DateTimeField(blank=True, null=True)
    inbound = models.NullBooleanField()
    created_at = models.DateTimeField()
    updated_at = models.DateTimeField()

    class Meta:
        managed = False
        db_table = 'texts'


class UserCustomers(models.Model):
    customer_id = models.IntegerField(blank=True, null=True)
    user_id = models.IntegerField(blank=True, null=True)
    created_at = models.DateTimeField()
    updated_at = models.DateTimeField()

    class Meta:
        managed = False
        db_table = 'user_customers'


class Users(models.Model):
    email = models.CharField(unique=True, max_length=255)
    encrypted_password = models.CharField(max_length=255, blank=True, null=True)
    reset_password_token = models.CharField(unique=True, max_length=255, blank=True, null=True)
    reset_password_sent_at = models.DateTimeField(blank=True, null=True)
    remember_created_at = models.DateTimeField(blank=True, null=True)
    sign_in_count = models.IntegerField()
    current_sign_in_at = models.DateTimeField(blank=True, null=True)
    last_sign_in_at = models.DateTimeField(blank=True, null=True)
    current_sign_in_ip = models.CharField(max_length=255, blank=True, null=True)
    last_sign_in_ip = models.CharField(max_length=255, blank=True, null=True)
    role = models.IntegerField(blank=True, null=True)
    created_at = models.DateTimeField(blank=True, null=True)
    updated_at = models.DateTimeField(blank=True, null=True)
    name = models.CharField(max_length=255, blank=True, null=True)
    mobile = models.CharField(max_length=255, blank=True, null=True)
    script_sequence = models.IntegerField(blank=True, null=True)
    family_name = models.CharField(max_length=255, blank=True, null=True)
    given_name = models.CharField(max_length=255, blank=True, null=True)
    invitation_token = models.CharField(unique=True, max_length=255, blank=True, null=True)
    invitation_created_at = models.DateTimeField(blank=True, null=True)
    invitation_sent_at = models.DateTimeField(blank=True, null=True)
    invitation_accepted_at = models.DateTimeField(blank=True, null=True)
    invitation_limit = models.IntegerField(blank=True, null=True)
    invited_by_id = models.IntegerField(blank=True, null=True)
    invited_by_type = models.CharField(max_length=255, blank=True, null=True)
    invitations_count = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'users'


class UsersRoles(models.Model):
    user_id = models.IntegerField(blank=True, null=True)
    role_id = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'users_roles'
